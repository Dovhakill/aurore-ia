import os
import datetime
from jinja2 import Environment, FileSystemLoader
from github import Github, GithubException
from bs4 import BeautifulSoup

def render_html(template_name, context):
    try:
        env = Environment(loader=FileSystemLoader('templates'))
        template = env.get_template(template_name)
        return template.render(context)
    except Exception as e:
        print(f"Erreur lors du rendu du template {template_name} : {e}")
        return None

def create_github_pr(title, summary, image_url, config):
    repo_name = config['site_repo_name']

    try:
        gh_token = os.environ["GH_TOKEN"]
        g = Github(gh_token)
        repo = g.get_repo(repo_name)

        # --- √âTAPE 1 : Cr√©er et publier le nouvel article ---
        print("Publication du nouvel article...")
        meta_description = (summary[:157] + '...') if len(summary) > 160 else summary
        article_context = {"title": title, "summary": summary, "image_url": image_url, "meta": {"description": meta_description}}
        new_article_html = render_html('article.html.j2', article_context)
        if not new_article_html: return None

        timestamp = datetime.datetime.now().strftime('%Y-%m-%d-%H%M%S')
        safe_title = "".join(c for c in title if c.isalnum() or c in " ").strip()
        new_article_filename = f"articles/{timestamp}-{safe_title[:30].lower().replace(' ', '-')}.html"
        commit_message_article = f"ü§ñ Aurore : Ajout de l'article '{title}'"

        repo.create_file(
            path=new_article_filename,
            message=commit_message_article,
            content=new_article_html,
            branch="main"
        )
        print(f"Article '{title}' publi√© avec succ√®s.")

        # --- √âTAPE 2 : Reconstruire et publier l'index ---
        print("Reconstruction de la page d'accueil...")
        articles_list = []
        contents = repo.get_contents("articles")
        for file in contents:
            if file.name.endswith('.html'):
                file_content_decoded = repo.get_contents(file.path).decoded_content.decode('utf-8')
                soup = BeautifulSoup(file_content_decoded, 'html.parser')
                article_title = soup.find('h1').text if soup.find('h1') else "Titre non trouv√©"
                article_image = soup.find('img')['src'] if soup.find('img') else ""
                file_date = datetime.datetime.strptime(file.name[:19], '%Y-%m-%d-%H%M%S')

                articles_list.append({
                    "filename": file.name, "date": file_date, "title": article_title,
                    "image_url": article_image, "date_human": file_date.strftime("%d %B %Y")
                })

        articles_list.sort(key=lambda x: x['date'], reverse=True)
        latest_articles = articles_list[:10]

        index_context = {"articles": latest_articles}
        new_index_html = render_html('index.html.j2', index_context)
        if not new_index_html: return "Article publi√©, mais erreur de M√†J de l'index."

        # On v√©rifie si index.html existe pour savoir s'il faut le cr√©er ou le mettre √† jour
        try:
            index_file = repo.get_contents("index.html")
            # Le fichier existe, on le met √† jour
            print("Mise √† jour de index.html...")
            repo.update_file(
                path="index.html",
                message="ü§ñ Aurore : Mise √† jour de la page d'accueil",
                content=new_index_html,
                sha=index_file.sha,
                branch="main"
            )
        except GithubException as e:
            if e.status == 404:
                # Le fichier n'existe pas, on le cr√©e
                print("Cr√©ation de index.html...")
                repo.create_file(
                    path="index.html",
                    message="ü§ñ Aurore : Cr√©ation de la page d'accueil",
                    content=new_index_html,
                    branch="main"
                )
            else:
                raise e

        return f"Article '{title}' publi√© et index mis √† jour."

    except Exception as e:
        print(f"Erreur critique lors de l'op√©ration GitHub : {e}")
        return None
